{"version":3,"sources":["weathercard.js","App.js","index.js"],"names":["Weathercard","tempInfo","React","useState","weatherState","setWeatherState","temp","pressure","humidity","weathermood","name","speed","country","sunset","useEffect","date","Date","timeStr","getHours","getMinutes","className","toLocaleString","App","searchValue","setSearchValue","setTempInfo","getWeatherInfo","a","url","fetch","response","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.473c9f67.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\n\r\nconst Weathercard = ({ tempInfo }) => {\r\n\r\n    const [weatherState, setWeatherState] = React.useState(\"\");\r\n\r\n    const {\r\n        temp,\r\n        pressure,\r\n        humidity,\r\n        weathermood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset,\r\n    } = tempInfo;\r\n\r\n    useEffect(() => {\r\n        if (weathermood) {\r\n            switch (weathermood) {\r\n                case \"Clouds\":\r\n                    setWeatherState(\"wi-cloudy\");\r\n                    break;\r\n                case \"Haze\":\r\n                    setWeatherState(\"wi-fog\");\r\n                    break;\r\n                case \"Clear\":\r\n                    setWeatherState(\"wi-day-sunny\");\r\n                    break;\r\n                case \"Mist\":\r\n                    setWeatherState(\"wi-fog\");\r\n                    break;\r\n                case \"Thunderstorm\":\r\n                    setWeatherState(\"wi-thunderstorm\");\r\n                    break;\r\n                case \"Drizzle\":\r\n                    setWeatherState(\"wi-sprinkle\");\r\n                    break;\r\n                case \"Rain\":\r\n                    setWeatherState(\"wi-raindrops\");\r\n                    break;\r\n                case \"Snow\":\r\n                    setWeatherState(\"wi-snow\");\r\n                    break;\r\n                case \"Dust\":\r\n                    setWeatherState(\"wi-dust\");\r\n                    break;\r\n                case \"Tornado\":\r\n                    setWeatherState(\"wi-tornado\");\r\n                    break;\r\n                    case \"Smoke\":\r\n                    setWeatherState(\"wi-smoke\");\r\n                    break;\r\n\r\n                default:\r\n                    setWeatherState(\"wi-day-sunny\");\r\n                    break;\r\n            }\r\n        }\r\n    }, [weathermood])\r\n\r\n    // convert time from seconds\r\n    let sec = sunset;\r\n    let date = new Date(sec * 1000);\r\n    let timeStr = `${date.getHours()}:${(date.getMinutes() < 10 ? '0' : '') + date.getMinutes()}`;\r\n\r\n    return (\r\n        <>\r\n            <div className=\"widget\">\r\n                <div className=\"weatherIcon\">\r\n                    <i className={`wi ${weatherState}`}></i>\r\n                </div>\r\n            </div>\r\n            <div className=\"tempTime\">\r\n                <div className=\"temp\">\r\n                    <span>{temp}&#8451;</span>\r\n                </div>\r\n                <div className=\"description\">\r\n                    <div className=\"weatherCondition\">{weathermood}</div>\r\n                    <div className=\"place\">{name}, {country}</div>\r\n                </div>\r\n                <div className=\"time\">\r\n                    <div className=\"date\">{new Date().toLocaleString()}</div>\r\n                </div>\r\n            </div>\r\n            {/* Bottom 4 columns */}\r\n            <div className=\"otherdetails\">\r\n                <div className=\"sunset\">\r\n                    <p><i className={\"wi wi-sunset\"}></i></p>\r\n                    <p className=\"sunsetInfo btmInfo\">Sunset <br /> {timeStr} PM</p>\r\n                </div>\r\n                <div className=\"humidity\">\r\n                    <p><i className={\"wi wi-humidity\"}></i></p>\r\n                    <p className=\"humidityInfo btmInfo\">Humidity <br /> {humidity}</p>\r\n                </div>\r\n                <div className=\"pressure\">\r\n                    <p><i className={\"wi wi-barometer\"}></i></p>\r\n                    <p className=\"pressureInfo btmInfo\">Pressure <br /> {pressure} MM</p>\r\n                </div>\r\n                <div className=\"wind\">\r\n                    <p><i className={\"wi wi-strong-wind\"}></i></p>\r\n                    <p className=\"windInfo btmInfo\">Wind <br /> {speed}</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Weathercard\r\n","import React, { useState, useEffect } from 'react'\nimport Weathercard from \"./weathercard\"\nimport \"./index.css\"\n\n\nconst App = () => {\n\n  const [searchValue,setSearchValue] = useState(\"Delhi\");\n  const [tempInfo,setTempInfo] = useState({});\n\n  const getWeatherInfo = async() => {\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=20e07f0e5e2b2b82c184a7af116cc3ed`;\n\n      const response = await fetch(url);\n      const data = await response.json();\n\n      const {temp,pressure,humidity} = data.main;\n      const {main: weathermood} = data.weather[0];\n      const {name} = data;\n      const {speed} = data.wind;\n      const {country,sunset} = data.sys;\n      console.log(temp);\n\n      const newWeatherInfo = {\n        temp,\n        pressure,\n        humidity,\n        weathermood,\n        name,\n        speed,\n        country,\n        sunset,\n      };\n      setTempInfo(newWeatherInfo);\n\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  \n  useEffect(() => {\n    getWeatherInfo();\n  }, []);\n\n  return (\n    <div className=\"wrap\">\n    <div className=\"apptitle\">\n      WeatherMaster\n    </div>\n      <div className=\"searchBar\">\n      <div className=\"search\">\n        <input type=\"search\"\n          placeholder=\"Search...\"\n          autoFocus\n          id=\"search\"\n          className=\"searchTerm\"\n          value={searchValue}\n          onChange={(e) => setSearchValue(e.target.value)}\n        />\n        <button className=\"searchBtn\" type=\"button\" onClick={getWeatherInfo}>\n        Search\n        </button>\n      </div>\n      </div>\n      \n      <Weathercard tempInfo = {tempInfo}/>\n\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}